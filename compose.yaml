#    This program is for the architecting of various Docker services, connected via networks, to form a stack.
#    Copyright (C) 2025, The CS Nerds (HippoProgrammer & SuitablyMysterious)
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU Affero General Public License as published
#    by the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU Affero General Public License for more details.
#
#    You should have received a copy of the GNU Affero General Public License
#    along with this program.  If not, see <https://www.gnu.org/licenses/>.

# Docker Compose configuration
services:
  frontend:
    container_name: frontend
    #image: library-system/frontend
    build: 
      context: ./src/frontend # Container is built dynamically from source
      dockerfile: frontend.Dockerfile
    ports: # Ports where webapp will run
      - "443:443" # HTTPS traffic for serving webapp
    networks:
      - backend
      - zitadel
    restart: unless-stopped
    depends_on:
      backend:
        condition: service_started
    command: ["python","/src/__main__.py"]
  backend: # Backend
    container_name: backend
    #image: library-system/backend
    build: 
      context: ./src/backend # Container is built dynamically from source
      dockerfile: backend.Dockerfile
    networks:
      - backend
      - db
    restart: unless-stopped
    environment:
      DB_HOST: db
      DB_PORT: 5432
    command: ["python","/src/__main__.py"]
    secrets:
      - db_pass
    depends_on:
      db:
        condition: service_healthy
  db: # Database
    image: postgres:17.5-alpine3.21  # Using alpine Postgres image
    networks:
      - db
      - zitadel
    restart: unless-stopped
    volumes:
      - pgdata:/var/lib/postgresql/data
      - db-init:/docker-entrypoint-initdb.d:ro # Init scripts for postgres
    environment:
      POSTGRES_USER:     library
      #POSTGRES_PASSWORD_FILE: /run/secrets/db_pass   
      POSTGRES_PASSWORD: postgres # for testing only
      POSTGRES_DB:       library

    secrets:
      - db_pass
      - casbin_login_pass

    healthcheck:
      test: ["CMD", "pg_isready", "-U", "library"]
      interval: 10s
      retries: 5
  zitadel:
    restart: 'always'
    networks:
      - 'zitadel'
    image: 'ghcr.io/zitadel/zitadel:latest'
    command: 'start-from-init --masterkey "MasterkeyNeedsToHave32Characters" --tlsMode disabled'
    environment:
      ZITADEL_DATABASE_POSTGRES_HOST: db
      ZITADEL_DATABASE_POSTGRES_PORT: 5432
      ZITADEL_DATABASE_POSTGRES_DATABASE: zitadel
      ZITADEL_DATABASE_POSTGRES_USER_USERNAME: zitadel
      ZITADEL_DATABASE_POSTGRES_USER_PASSWORD: zitadel
      ZITADEL_DATABASE_POSTGRES_USER_SSL_MODE: disable
      ZITADEL_DATABASE_POSTGRES_ADMIN_USERNAME: library
      ZITADEL_DATABASE_POSTGRES_ADMIN_PASSWORD: postgres
      ZITADEL_DATABASE_POSTGRES_ADMIN_SSL_MODE: disable
      ZITADEL_EXTERNALSECURE: false
    depends_on:
      db:
        condition: 'service_healthy'
    ports:
      - '8080:8080'
    secrets:
      - db_pass
      
networks:
  backend:
    driver: bridge
  db:
    driver: bridge
  zitadel:
    driver: bridge

volumes:
  pgdata:
  db-init:

secrets:
  casbin_login_pass:
    file: ./secrets/casbin_login_pass.txt
  db_pass:
    file: ./secrets/db_pass.txt
