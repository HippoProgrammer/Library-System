# Docker Compose configuration
services:
  frontend: # Frontend webapp
    container_name: frontend
    image: library-system/frontend
    build: ./frontend # Container is built dynamically from source
    ports: # Ports where webapp will run
      - "80:80" # HTTP traffic for serving webapp
    networks:
      - backend
    restart: unless-stopped
    depends_on:
      backend:
        condition: service_started
    command: ["python","/src/__main__.py"]
    env_file: "src/frontend/configuration.env"
  backend: # Backend
    container_name: backend
    image: library-system/backend
    build: ./backend # Container is built dynamically from source
    networks:
      - backend
      - db
    restart: unless-stopped
    depends_on:
      db:
        condition: service_started
    command: ["python","/src/__main__.py"]
    env_file: "src/backend/configuration.env"
  db: # Database
    image: postgres/17.5-alpine3.21  # Using alpine Postgres image
    networks:
      - db
    restart: unless-stopped
    volumes:
      - pgdata:/var/lib/postgresql/data
      
networks:
  backend:
    driver: bridge
  db:
    driver: bridge

volumes:
  pgdata:
