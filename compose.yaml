#    This repository is made for the purpose of managing online library systems
#    Copyright (C) <2025>  <The CS Nerds>
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU Affero General Public License as published
#    by the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU Affero General Public License for more details.
#
#    You should have received a copy of the GNU Affero General Public License
#    along with this program.  If not, see <https://www.gnu.org/licenses/>.

# Docker Compose configuration

services:
  frontend: # Frontend webapp
    container_name: frontend
    #image: library-system/frontend
    build: 
      context: ./src/frontend # Container is built dynamically from source
      dockerfile: frontend.Dockerfile
    ports: # Ports where webapp will run
      - "443:443" # HTTPS traffic for serving webapp
    networks:
      - backend
    restart: unless-stopped
    depends_on:
      backend:
        condition: service_started
    command: ["python","/src/__main__.py"]
  backend: # Backend
    container_name: backend
    #image: library-system/backend
    build: 
      context: ./src/backend # Container is built dynamically from source
      dockerfile: backend.Dockerfile
    networks:
      - backend
      - db
    restart: unless-stopped
    environment:
      DB_HOST: db
      DB_PORT: 5432
    command: ["python","/src/__main__.py"]
    secrets:
      - db_pass
    depends_on:
      db:
        condition: service_healthy
  db: # Database
    image: postgres:17.5-alpine3.21  # Using alpine Postgres image
    networks:
      - db
    restart: unless-stopped
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./db-init:/docker-entrypoint-initdb.d:ro # Init scripts for postgres
    environment:
      POSTGRES_USER:     library
      POSTGRES_PASSWORD_FILE: /run/secrets/db_pass   
      POSTGRES_DB:       library

    secrets:
      - db_pass

    healthcheck:
      test: ["CMD", "pg_isready", "-U", "library"]
      interval: 10s
      retries: 5
      
networks:
  backend:
    driver: bridge
  db:
    driver: bridge

volumes:
  pgdata:

secrets:
  db_pass:
    environment: DB_PASS
